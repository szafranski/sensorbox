# text_sensor templates to select and format sensor values for display.
# there's got to be a less janky way to do this, but it works.
# NFC why ESPHome needs conversion from c_str to std::string for return,
# then back from std::string to c_str for display, that's pretty stupid,
# but strings returned the normal C way get corrupted 100% of the time.
text_sensor:
  - platform: template
    id: "temperature_disp"
    name: "Temperature"
    internal: true
    lambda: |-
      float temps[6] = {id(temp_sen5x).state,
                        id(temp_sht40).state,
                        id(temp_aht20).state,
                        id(temp_scd40).state,
                        id(temp_aht20_ens).state,
                        id(temp_bmp280).state};
      float temp = 0;
      for (int i = 0; i < 6; i++) {
        if (!isnan(temps[i])) { temp = temps[i] + id(temp_offset); break; }
      }
      char str[20] = {'0'};
      if (temp < $temp_cold) { snprintf(str, sizeof str, "#%s %.1f#", "$cold_hex", temp); }
      else if (temp > $temp_hot) { snprintf(str, sizeof str, "#%s %.1f#", "$hot_hex", temp); }
      else { snprintf(str, sizeof str, "#%s %.1f#", "$comfort_hex", temp); }
      return ((std::string) str);
    on_value:
      - lvgl.label.update:
          id: temperature
          text:
            format: "%s"
            args: [ 'x.c_str()' ]
    update_interval: 10s

  - platform: template
    id: "humidity_disp"
    name: "Humidity"
    internal: true
    lambda: |-
      float hums[5] = {id(hum_sen5x).state,
                       id(hum_sht40).state,
                       id(hum_aht20).state,
                       id(hum_scd40).state,
                       id(hum_aht20_ens).state};
      float hum = 0;
      for (int i = 0; i < 5; i++) {
        if (!isnan(hums[i])) { hum = hums[i]; break; }
      }
      char str[20] = {'0'};
      if (hum > $humid_high) { snprintf(str, sizeof str, "#%s %.1f#", "$high_hex", hum); }
      else if (hum < $dry_high) { snprintf(str, sizeof str, "#%s %.1f#", "$high_hex", hum); }
      else if (hum > $humid_medium) { snprintf(str, sizeof str, "#%s %.1f#", "$medium_hex", hum); }
      else if (hum < $dry_medium) { snprintf(str, sizeof str, "#%s %.1f#", "$medium_hex", hum); }
      else if (hum > $humid_low) { snprintf(str, sizeof str, "#%s %.1f#", "$low_hex", hum); }
      else if (hum < $dry_low) { snprintf(str, sizeof str, "#%s %.1f#", "$low_hex", hum); }
      else { snprintf(str, sizeof str, "#%s %.1f#", "$safe_hex", hum); }
      return ((std::string) str);
    on_value:
      - lvgl.label.update:
          id: humidity
          text:
            format: "%s"
            args: [ 'x.c_str()' ]
    update_interval: 10s

  - platform: template
    id: "co2_disp"
    name: "CO2"
    internal: true
    lambda: |-
      float cos[3] = {id(co2_scd40).state,
                      id(eco2_ens160).state,
                      id(eco2_sgp30).state};
      float co = 0;
      for (int i = 0; i < 3; i++) {
        if (!isnan(cos[i])) { co = cos[i]; break; }
      }
      char str[20] = {'0'};
      if (co > $co2_high) { snprintf(str, sizeof str, "#%s %.0f#", "$high_hex", co); }
      else if (co > $co2_medium) { snprintf(str, sizeof str, "#%s %.0f#", "$medium_hex", co); }
      else if (co > $co2_low) { snprintf(str, sizeof str, "#%s %.0f#", "$low_hex", co); }
      else { snprintf(str, sizeof str, "#%s %.0f#", "$safe_hex", co); }
      return ((std::string) str);
    on_value:
      - lvgl.label.update:
          id: co2
          text:
            format: "%s"
            args: [ 'x.c_str()' ]
    update_interval: 10s

  - platform: template
    id: "pressure_disp"
    name: "Pressure"
    internal: true
    lambda: |-
      char str[20] = {'0'};
      if (!isnan(id(pres_bmp280).state)) { snprintf(str, sizeof str, "%.0f", id(pres_bmp280).state); }
      return ((std::string) str);
    on_value:
      - lvgl.label.update:
          id: pressure
          text:
            format: "%s"
            args: [ 'x.c_str()' ]

  - platform: template
    id: "voc_disp"
    name: "VOCs"
    internal: true
    lambda: |-
      float vocs[3] = {id(tvoc_sen5x).state,
                       id(tvoc_ens160).state,
                       id(tvoc_sgp30).state};
      float voc = 0;
      for (int i = 0; i < 3; i++) {
        if (!isnan(vocs[i])) { voc = vocs[i]; break; }
      }
      char str[20] = {'0'};
      if (voc > $voc_high) { snprintf(str, sizeof str, "#%s %.0f#", "$high_hex", voc); }
      else if (voc > $voc_medium) { snprintf(str, sizeof str, "#%s %.0f#", "$medium_hex", voc); }
      else if (voc > $voc_low) { snprintf(str, sizeof str, "#%s %.0f#", "$low_hex", voc); }
      else { snprintf(str, sizeof str, "#%s %.0f#", "$safe_hex", voc); }
      return ((std::string) str);
    on_value:
      - lvgl.label.update:
          id: vocs
          text:
            format: "%s"
            args: [ 'x.c_str()' ]
    update_interval: 10s

  - platform: template
    id: ch2o_disp
    name: "CH2O display"
    internal: true
    lambda: |-
      float ch2o = 0;
      if (!isnan(id(ch2o_ze08).state)) { ch2o = id(ch2o_ze08).state; }
      char str[20] = {'0'};
      if (ch2o > $ch2o_high) { snprintf(str, sizeof str, "#%s %.0f#", "$high_hex", ch2o); }
      else if (ch2o > $ch2o_medium) { snprintf(str, sizeof str, "#%s %.0f#", "$medium_hex", ch2o); }
      else if (ch2o > $ch2o_low) { snprintf(str, sizeof str, "#%s %.0f#", "$low_hex", ch2o); }
      else { snprintf(str, sizeof str, "#%s %.0f#", "$safe_hex", ch2o); }
      return ((std::string) str);
    on_value:
      - lvgl.label.update:
          id: ch2o
          text:
            format: "%s"
            args: [ 'x.c_str()' ]
    update_interval: 10s
  
  - platform: template
    id: pm1_0_disp
    name: "PM1.0 Display"
    internal: true
    lambda: |-
      float pm1s[2] = {id(pm1_sen5x).state,
                       id(pm1_pms).state};
      float pm1 = 0;
      for (int i = 0; i < 2; i++) {
        if (!isnan(pm1s[i])) { pm1 = pm1s[i]; break; }
      }
      char str[20] = {'0'};
      if (pm1 > $pm1_high) { snprintf(str, sizeof str, "#%s %.0f#", "$high_hex", pm1); }
      else if (pm1 > $pm1_medium) { snprintf(str, sizeof str, "#%s %.0f#", "$medium_hex", pm1); }
      else if (pm1 > $pm1_low) { snprintf(str, sizeof str, "#%s %.0f#", "$low_hex", pm1); }
      else { snprintf(str, sizeof str, "#%s %.0f#", "$safe_hex", pm1); }
      return ((std::string) str);
    on_value:
      - lvgl.label.update:
          id: pm_1_0
          text:
            format: "%s"
            args: [ 'x.c_str()' ]
    update_interval: 10s
      
  - platform: template
    id: pm2_5_disp
    name: "PM2.5 Display"
    internal: true
    lambda: |-
      float pm25s[2] = {id(pm25_sen5x).state,
                        id(pm25_pms).state};
      float pm25 = 0;
      for (int i = 0; i < 2; i++) {
        if (!isnan(pm25s[i])) { pm25 = pm25s[i]; break; }
      }
      char str[20] = {'0'};
      if (pm25 > $pm25_high) { snprintf(str, sizeof str, "#%s %.0f#", "$high_hex", pm25); }
      else if (pm25 > $pm25_medium) { snprintf(str, sizeof str, "#%s %.0f#", "$medium_hex", pm25); }
      else if (pm25 > $pm25_low) { snprintf(str, sizeof str, "#%s %.0f#", "$low_hex", pm25); }
      else { snprintf(str, sizeof str, "#%s %.0f#", "$safe_hex", pm25); }
      return ((std::string) str);
    on_value:
      - lvgl.label.update:
          id: pm_2_5
          text:
            format: "%s"
            args: [ 'x.c_str()' ]
    update_interval: 10s
      
  - platform: template
    id: pm4_0_disp
    name: "PM4.0 Display"
    internal: true
    lambda: |-
      float pm40s[4] = {id(pm40_sen5x).state,
                        id(pm1_pms).state,
                        id(pm25_pms).state,
                        id(pm10_pms).state};
      float pm40 = 0;

      if (!isnan(pm40s[0])) {   // Priority #1: Use direct sen5x pm40 sensor reading if available
        pm40 = pm40s[0];
      }
   
      else if (!isnan(pm40s[1]) && !isnan(pm40s[2]) && !isnan(pm40s[3]) &&  // Priority #2: Interpolate using PMS sensors (PM1.0, PM2.5, and PM10.0)
               pm40s[1] <= pm40s[2] && pm40s[2] <= pm40s[3]) {

        float log_pm1 = log(1.0);
        float log_pm25 = log(2.5);
        float log_pm4 = log(4.0);
        float log_pm10 = log(10.0);

        if (log_pm4 <= log_pm25) {
          // Interpolation logic: Interpolate between PM1.0 and PM2.5
          pm40 = pm40s[1] + (pm40s[2] - pm40s[1]) * (log_pm4 - log_pm1) / (log_pm25 - log_pm1);
        } else {
          // Interpolation logic: Interpolate between PM2.5 and PM10.0
          pm40 = pm40s[2] + (pm40s[3] - pm40s[2]) * (log_pm4 - log_pm25) / (log_pm10 - log_pm25);
        }

        // Interpolation logic:  Constrain the value: PM4.0 cannot be less than PM2.5 or more than PM10.0
        pm40 = std::min(std::max(pm40, pm40s[2]), pm40s[3]);
      }

      char str[20] = {'0'};
      if (!isnan(pm40)) {
        if (pm40 > $pm40_high) { snprintf(str, sizeof str, "#%s %.0f#", "$high_hex", pm40); }
        else if (pm40 > $pm40_medium) { snprintf(str, sizeof str, "#%s %.0f#", "$medium_hex", pm40); }
        else if (pm40 > $pm40_low) { snprintf(str, sizeof str, "#%s %.0f#", "$low_hex", pm40); }
        else { snprintf(str, sizeof str, "#%s %.0f#", "$safe_hex", pm40); }
      } else {
        snprintf(str, sizeof str, "N/A");
      }
      return ((std::string) str);
    on_value:
      - lvgl.label.update:
          id: pm_4_0_value
          text:
            format: "%s"
            args: [ 'x.c_str()' ]
    update_interval: 10s

  - platform: template
    id: pm4_label_disp
    name: "PM4 Label Display"
    internal: true
    lambda: |-
      if (!isnan(id(pm40_sen5x).state)) {
        return {"PM4.0"};                    // SEN5x sensor available, direct PM4.0 measurement
      } else {
        return {"PM4.0e"};                   // SEN5x unavailable, extrapolated PM4.0 from PMS sensor
      }
    update_interval: 10s
    on_value:
      - lvgl.label.update:
          id: pm_4_0_label
          text:
            format: "%s"
            args: [ 'x.c_str()' ]

  - platform: template
    id: pm10_0_disp
    name: "PM10.0 Display"
    internal: true
    lambda: |-
      float pm10s[2] = {id(pm10_sen5x).state,
                        id(pm10_pms).state};
      float pm10 = 0;
      for (int i = 0; i < 2; i++) {
        if (!isnan(pm10s[i])) { pm10 = pm10s[i]; break; }
      }
      char str[20] = {'0'};
      if (pm10 > $pm10_high) { snprintf(str, sizeof str, "#%s %.0f#", "$high_hex", pm10); }
      else if (pm10 > $pm10_medium) { snprintf(str, sizeof str, "#%s %.0f#", "$medium_hex", pm10); }
      else if (pm10 > $pm10_low) { snprintf(str, sizeof str, "#%s %.0f#", "$low_hex", pm10); }
      else { snprintf(str, sizeof str, "#%s %.0f#", "$safe_hex", pm10); }
      return ((std::string) str);
    on_value:
      - lvgl.label.update:
          id: pm_10_0
          text:
            format: "%s"
            args: [ 'x.c_str()' ]
    update_interval: 10s
