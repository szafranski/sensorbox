esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  platformio_options:
    board_build.flash_mode: dio
  project:
    name: esphome.web
    version: dev
  on_boot:
    then:
      - light.turn_on:
          id: back_light
          brightness: 33%

esp32:
  board: esp32-s2-saola-1
  framework:
    type: arduino

logger:
  level: INFO
  #level: DEBUG

api:
  on_client_connected:
    - if:
        condition:
          api.connected:
        then:
          - lvgl.label.update:
              id: ha_status
              text: ${ha_icon}
              text_color: white
        else:
          - lvgl.label.update:
              id: ha_status
              text: ${ha_icon}
              text_color: red
  on_client_disconnected:
    if:
      condition:
        not:
          api.connected:
      then:
        - lvgl.label.update:
            id: ha_status
            text: ${no_ha_icon}
            text_color: red

ota:
- platform: esphome

improv_serial:

wifi:
  output_power: 10.0dB
  power_save_mode: none
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Sensorbox"
    password: !secret wifi_password
  on_connect:
    - lvgl.label.update:
        id: wifi_status
        text: ${wifi_icon}
        text_color: white
  on_disconnect:
    - lvgl.label.update:
        id: wifi_status
        text: ${no_wifi_icon}
        text_color: red

captive_portal:

dashboard_import:
  package_import_url: github://esphome/firmware/esphome-web/esp32s2.yaml@main
  import_full_config: true

web_server:

debug:
  update_interval: 5s

# Set up the display
display:
  - platform: ili9xxx
    model: ILI9341
    cs_pin: GPIO03
    dc_pin: GPIO04
    reset_pin: GPIO06
    #data_rate: 10MHz
    transform:
      #mirror_x: true
      mirror_y: true
    #show_test_card: true
    color_order: bgr # CHANGE THIS if your screen has colors mapped wrong
    invert_colors: false
    auto_clear_enabled: false
    update_interval: never
    dimensions:
      height: 320
      width: 240

uart:
  - tx_pin: GPIO10
    rx_pin: GPIO09
    baud_rate: 9600
    id: uart_ze08
    parity: none
    data_bits: 8
    stop_bits: 1
    debug: 
      direction: BOTH
      dummy_receiver: true
      after:
        # bytes: 9 
        timeout: 10ms
      sequence:
        - lambda: |-
            //UARTDebug::log_int(direction, bytes, ',');                 // Log the message as int. 
            //UARTDebug::log_hex(direction, bytes, ',');                 // Log the message in hex.
            ESP_LOGD("custom", "Bytes size: %d", bytes.size());
            if (direction == UART_DIRECTION_RX)                        
              {
                  if (bytes.size() == 9)                               
                    {
                        if ( bytes[0] == 0xFF &&                       // Check sensor identification
                            bytes[1] == 0x17
                            )       
                          {
                            float value = float((bytes[4] * 256) + bytes[5]);  // Decode message
                            id(ch2o_ze08).publish_state(value);     // Publish results to a sensor.
                          }
                    }
              }

  - tx_pin: GPIO08
    rx_pin: GPIO07
    baud_rate: 9600
    id: uart_pms

spi:
  clk_pin: GPIO01
  mosi_pin: GPIO02
  miso_pin: GPIO16

i2c:
  - sda: GPIO11
    scl: GPIO12
    scan: true
    id: i2c_main

  - sda: GPIO17
    scl: GPIO18
    scan: true
    id: i2c_2

